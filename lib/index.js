/* eslint-env browser */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "YMInitializer", {
  enumerable: true,
  get: function get() {
    return _component.YMInitializer;
  }
});
exports["default"] = void 0;
exports.withFilter = withFilter;
exports.withId = withId;
var _constants = require("./constants");
var _component = require("./component");
function ymProxy(id, methodName) {
  try {
    var _window$trackerInstan;
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    (_window$trackerInstan = window[(0, _constants.trackerInstanceName)(id)])[methodName].apply(_window$trackerInstan, args);
  } catch (ex) {
    console.warn(ex);
  }
}
function accountIdList() {
  return typeof window !== 'undefined' ? window[_constants.accountListName] : [];
}
function ymAsyncProxy(ids) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    ids.forEach(function (id) {
      var trackerVersion = window[(0, _constants.trackerVersionName)(id)];
      var callbackQueue = window[(0, _constants.callbackQueueName)(trackerVersion)];
      if (callbackQueue) {
        callbackQueue.push(function () {
          return ymProxy.apply(void 0, [id].concat(args));
        });
      } else {
        ymProxy.apply(void 0, [id].concat(args));
      }
    });
  };
}
function ym() {
  return ymAsyncProxy(accountIdList()).apply(void 0, arguments);
}
function withId(counterId) {
  return withFilter(function (id) {
    return counterId === id;
  });
}
function withFilter(f) {
  return ymAsyncProxy(accountIdList().filter(f));
}
var _default = ym;
exports["default"] = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfY29tcG9uZW50IiwiWU1Jbml0aWFsaXplciIsIndpdGhGaWx0ZXIiLCJ3aXRoSWQiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsInltUHJveHkiLCJpZCIsIm1ldGhvZE5hbWUiLCJfd2luZG93JHRyYWNrZXJJbnN0YW4iLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIndpbmRvdyIsInRyYWNrZXJJbnN0YW5jZU5hbWUiLCJhcHBseSIsImV4IiwiY29uc29sZSIsIndhcm4iLCJhY2NvdW50SWRMaXN0IiwiYWNjb3VudExpc3ROYW1lIiwieW1Bc3luY1Byb3h5IiwiaWRzIiwiX2xlbjIiLCJfa2V5MiIsImZvckVhY2giLCJ0cmFja2VyVmVyc2lvbiIsInRyYWNrZXJWZXJzaW9uTmFtZSIsImNhbGxiYWNrUXVldWUiLCJjYWxsYmFja1F1ZXVlTmFtZSIsInB1c2giLCJjb25jYXQiLCJ5bSIsImNvdW50ZXJJZCIsImYiLCJmaWx0ZXIiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtcbiAgICBhY2NvdW50TGlzdE5hbWUsXG4gICAgY2FsbGJhY2tRdWV1ZU5hbWUsXG4gICAgdHJhY2tlckluc3RhbmNlTmFtZSxcbiAgICB0cmFja2VyVmVyc2lvbk5hbWVcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5mdW5jdGlvbiB5bVByb3h5KGlkLCBtZXRob2ROYW1lLCAuLi5hcmdzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgd2luZG93W3RyYWNrZXJJbnN0YW5jZU5hbWUoaWQpXVttZXRob2ROYW1lXSguLi5hcmdzKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBjb25zb2xlLndhcm4oZXgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWNjb3VudElkTGlzdCgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3dbYWNjb3VudExpc3ROYW1lXSA6IFtdO1xufVxuXG5mdW5jdGlvbiB5bUFzeW5jUHJveHkoaWRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICAgIGxldCB0cmFja2VyVmVyc2lvbiA9IHdpbmRvd1t0cmFja2VyVmVyc2lvbk5hbWUoaWQpXTtcbiAgICAgICAgICAgIGxldCBjYWxsYmFja1F1ZXVlID0gd2luZG93W2NhbGxiYWNrUXVldWVOYW1lKHRyYWNrZXJWZXJzaW9uKV07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrUXVldWUucHVzaCgoKSA9PiB5bVByb3h5KGlkLCAuLi5hcmdzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHltUHJveHkoaWQsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB5bSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHltQXN5bmNQcm94eShhY2NvdW50SWRMaXN0KCkpKC4uLmFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aElkKGNvdW50ZXJJZCkge1xuICAgIHJldHVybiB3aXRoRmlsdGVyKGlkID0+IGNvdW50ZXJJZCA9PT0gaWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aEZpbHRlcihmKSB7XG4gICAgcmV0dXJuIHltQXN5bmNQcm94eShhY2NvdW50SWRMaXN0KCkuZmlsdGVyKGYpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgeW07XG5leHBvcnQgeyBZTUluaXRpYWxpemVy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